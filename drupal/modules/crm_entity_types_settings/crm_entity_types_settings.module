<?php

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */

require_once 'contact_types.php';
function crm_entity_types_settings_help($path, $arg) {
  switch ($path) {
    case "admin/help#crm_entity_types_settings":
      return '<p>' . t("Implementation of CRM entity types besides what comes from features' crm_entity_types") . '</p>';
      break;
  }
} 



/**
 * Implements hook_block_info().
 */
function crm_entity_types_settings_block_info() {
  $blocks['new_block'] = array(
    // The name that will appear in the block list.
    'info' => t('My New Block'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function crm_entity_types_settings_block_view($delta = '') {
  switch ($delta) {
    case 'new_block':
      $block['subject'] = t('a New Block');
      if (user_access('access content')) {
          $block['content'] = t('place holder for block');  
      }
      else {
          $block['content'] = t('You are not allowed to view this');  
      }
    return $block;
  }
}




function crm_core_contact_customer_label($entity)
{
	$field_caption = field_view_field('crm_core_contact', $entity, 'field_caption', array('settings' => array('output' => 'raw')));
	if(isset($field_caption[0]['#markup']))
	{
		return $field_caption[0]['#markup'];
	}
	$field_name = field_view_field('crm_core_contact', $entity, 'contact_name', array('settings' => array('output' => 'raw')));
	return isset($field_name[0]['#markup']) ? isset($field_name[0]['#markup']) : "no label";
}

function generate_relationship()
{
    //do nothing
}

function page_manager_page_cb()
{
    module_load_include("inc", "page_manager", "plugins/tasks/page");
    $subtask_id = "child_main_page";
    $output = page_manager_page_execute($subtask_id);    
//    kpr($output);
    //return "XXXX";
    return $output;
}

function crm_entity_types_settings_view_related_cb($entity_id, $my_view_name, $relation_type, $r_index)
{
// how about views_embed_view() ?
    //http://www.drupalcontrib.org/api/drupal/contributions%21views%21views.module/function/views_embed_view/7
    
    $my_display_name = 'page';
    
    $basic_relationship_name = "crm_member"; //this was the first relationship that I added, so the name sticks
    $my_view = views_get_view($my_view_name);
    if ( is_object($my_view) ) { 
	$my_view->set_display($my_display_name);


	$relation_relationship = $my_view->get_item($my_display_name, 'relationship', 'relation_base_left_crm_member');
	kpr($relation_relationship);
	$relation_relationship['r_index'] = $r_index;
	$relation_relationship['field'] = 'relation_base_left_' . $relation_type;
	$my_view->set_item($my_display_name , 'relationship', 'relation_base_left_crm_member', $relation_relationship);
	
	$relation_relationship = $my_view->get_item($my_display_name, 'relationship', 'relation_base_crm_member_crm_core_contact');
	kpr($relation_relationship);
	$relation_relationship['r_index'] = 1 - $r_index;
	$relation_relationship['field'] = 'relation_base_' . $relation_type . '_crm_core_contact';
	$my_view->set_item($my_display_name , 'relationship', 'relation_base_crm_member_crm_core_contact', $relation_relationship);
	
//	$filter_relation_type = $my_view->get_item($my_display_name, 'filter', 'relation_type');
//	$filter_relation_type['value'] = array($relation_type);
//	$my_view->set_item($my_display_name , 'filter', 'relation_type', $filter_relation_type);	

	
	$filter_source_contact_id = $my_view->get_item($my_display_name, 'filter', 'contact_id');
	$filter_source_contact_id['value']['value'] = $entity_id;
	kpr($filter_source_contact_id);
	$my_view->set_item($my_display_name , 'filter', 'contact_id', $filter_source_contact_id);	
//	kpr($my_view);

	$my_view->pre_execute();
	$rendered = $my_view->render($my_display_name);
//	kpr ($rendered);
	return $my_view->render($rendered);
    }
}

function crm_entity_types_settings_menu()
{
    $items = array();
//    $items["crm-core/contact/%/relationships/generate"] = array(
//      'title' => 'Generate a relationship',
//      'description' => 'Generate a relationship to this contact',
//      'page callback' => 'generate_relationship',
//      'page arguments' => array( 2 ),
//      'access callback' => TRUE,
//      'type' => MENU_LOCAL_ACTION,
////      'file' => 'crm_core_relationship_ui.pages.inc',
//      'weight' => 5,
//    );

//    $items["crm-core/contact/generate"] = array(
//      'title' => 'Generate a relationship general',
//      'description' => 'Generate a relationship to this contact',
//      'page callback' => 'generate_relationship',
////      'page arguments' => array( 2 ),
//      'access callback' => TRUE,
//      'type' => MENU_LOCAL_ACTION,
////      'file' => 'crm_core_relationship_ui.pages.inc',
//      'weight' => 5,
//    );

//    $items["crm-core/contact/eliminate"] = array(
//      'title' => 'Eliminate a relationship general',
//      'description' => 'Generate a relationship to this contact',
//      'page callback' => 'generate_relationship',
////      'page arguments' => array( 2 ),
//      'access callback' => TRUE,
//      'type' => MENU_LOCAL_ACTION,
////      'file' => 'crm_core_relationship_ui.pages.inc',
//      'weight' => 5,
//    );
    
//    $items["crm-core/contact/%"] = array(
//      'title' => 'parent',
//      'description' => 'additional tab',
//      'type' => MENU_NORMAL_ITEM,
//      'weight' => 5,
//      'access callback' => TRUE,
//    );
    
    
    
    $items["crm-core/contact/%crm_core_contact/tab2"] = array(
      'title' => 'Tab2',
      'description' => 'additional tab with page manager page',
      'type' => MENU_LOCAL_TASK,
      'weight' => 4,
      'access callback' => FALSE,  //this is just a trial tab, don't really show it!
      'page callback' => 'page_manager_page_cb',
    );
    

    $items["crm-core/contact/%crm_core_contact/views_view"] = array(
      'title' => 'Views view',
      'description' => 'additional tab with views view',
      'type' => MENU_LOCAL_TASK,
      'weight' => 5,
      'access callback' => TRUE,  //this is just a trial tab, don't really show it!
      'page callback' => 'views_view_cb',
    );
    
    

    $items["crm-core/contact/%/related/crm_member/0"] = array(
      'title' => 'Household',
      'description' => 'List and manage household members',
      'type' => MENU_LOCAL_TASK,
      'weight' => 4,
      'access callback' => TRUE,  //TODO!!!
      'page callback' => 'crm_entity_types_settings_view_related_cb',
      'page arguments' => array(2, 'related_entities_new', 4, 5), //the contact obj, the name of view and the context of view ('household' in this case)
    );
    
    $items["crm-core/contact/%/related/crm_member/1"] = array(
      'title' => 'Household',
      'description' => 'List and manage household members',
      'type' => MENU_LOCAL_TASK,
      'weight' => 4,
      'access callback' => TRUE,  //TODO!!!
      'page callback' => 'crm_entity_types_settings_view_related_cb',
      'page arguments' => array(2, 'related_entities_new', 4, 5), //the contact obj, the name of view and the context of view ('household' in this case)
    );
    

    $items["crm-core/contact/%/related/genetic_parent_of/0"] = array(
      'title' => 'Genetic Relations',
      'description' => 'Tracks genetic father and mother, or sperm/egg donors',
      'type' => MENU_LOCAL_TASK,
      'weight' => 4,
      'access callback' => TRUE,  //TODO!!!
      'page callback' => 'crm_entity_types_settings_view_related_cb',
      'page arguments' => array(2, 'related_entities_new', 4, 5), //the contact obj, the name of view and the context of view ('household' in this case)
    );

     $items["crm-core/contact/%/related/genetic_parent_of/1"] = array(
       'title' => 'Genetic Relations',
       'description' => 'Tracks genetic father and mother, or sperm/egg donors',
       'type' => MENU_LOCAL_TASK,
       'weight' => 4,
       'access callback' => TRUE,  //TODO!!!
       'page callback' => 'crm_entity_types_settings_view_related_cb',
       'page arguments' => array(2, 'related_entities_new', 4, 5), //the contact obj, the name of view and the context of view ('household' in this case)
     );
    return $items;
}

function crm_entity_types_settings_menu_alter(&$items) 
{
    // Unset crm-core tab for relationship which is too generic for this module
//    print "<pre>menu items:". print_r($items, true). "</pre>";
    //unset($items['crm-core/contact/%/relationships']);
}

//implements hook_views_data_alter
function crm_entity_types_settings_views_data_alter(&$data)
{
//    print "<pre>views items keys:". print_r(array_keys($data), true). "</pre>";
//    print "<pre>views items:". print_r($data, true). "</pre>";
//    unset ($data['crm_relationships_by_contact']);
//    unset ($data['crm_core_contact']);
}

// implements hook_menu_local_tasks_alter
function crm_entity_types_settings_menu_local_tasks_alter(&$data, $router_item, $root_path)
{
//    kpr($router_item);
//    kpr($data);
     $entity_obj = menu_get_object('crm_core_contact', 2);
     if ($entity_obj)
    {
	$tabs = crm_entity_types_settings_get_pages($entity_obj);
	if ($tabs){ //if $tab==NULL it means that this entity type has no tabs config yet
	    //	kpr($tabs);
	    $menu_level = 0;
	    foreach($data['tabs'][$menu_level]['output'] as $tab_key => $tab_data)
	    {
		//we want to unregister this tab if it doesn't fit our entity type
		$registered_tab_path = $tab_data['#link']['path']; 
		if (!array_key_exists($registered_tab_path, $tabs['tabs']) &&
			$registered_tab_path != "crm-core/contact/%/devel"
		    )
		{
		//		  kpr(array($tab_key, $registered_tab_path));
		    unset($data['tabs'][$menu_level]['output'][$tab_key]);
		}
		//@TODO: add new tabs/actions from crm_entity_types_settings_get_pages() that were not yet been registered by hook_menu().
	    }
	}

    }
}
