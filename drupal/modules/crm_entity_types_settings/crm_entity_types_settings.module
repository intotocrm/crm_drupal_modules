<?php

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */

require_once 'contact_types.php';
function crm_entity_types_settings_help($path, $arg) {
  switch ($path) {
    case "admin/help#crm_entity_types_settings":
      return '<p>' . t("Implementation of CRM entity types besides what comes from features' crm_entity_types") . '</p>';
      break;
  }
} 



/**
 * Implements hook_block_info().
 */
function crm_entity_types_settings_block_info() {
  $blocks['new_block'] = array(
    // The name that will appear in the block list.
    'info' => t('My New Block'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function crm_entity_types_settings_block_view($delta = '') {
  switch ($delta) {
    case 'new_block':
      $block['subject'] = t('a New Block');
      if (user_access('access content')) {
          $block['content'] = t('place holder for block');  
      }
      else {
          $block['content'] = t('You are not allowed to view this');  
      }
    return $block;
  }
}




function crm_core_contact_customer_label($entity)
{
	$field_caption = field_view_field('crm_core_contact', $entity, 'field_caption', array('settings' => array('output' => 'raw')));
	if(isset($field_caption[0]['#markup']))
	{
		return $field_caption[0]['#markup'];
	}
	$field_name = field_view_field('crm_core_contact', $entity, 'contact_name', array('settings' => array('output' => 'raw')));
	return isset($field_name[0]['#markup']) ? isset($field_name[0]['#markup']) : "no label";
}

function generate_relationship()
{
    //do nothing
}

function page_manager_page_cb()
{
    module_load_include("inc", "page_manager", "plugins/tasks/page");
    $subtask_id = "child_main_page";
    $output = page_manager_page_execute($subtask_id);    
//    kpr($output);
    //return "XXXX";
    return $output;
}

function crm_entity_types_settings_view_related_cb($entity, $my_view_name, $relation_type, $r_index)
{
// how about views_embed_view() ?
    //http://www.drupalcontrib.org/api/drupal/contributions%21views%21views.module/function/views_embed_view/7
    

    
    $my_display_name = 'page';
    
    $basic_relationship_name = "crm_member"; //this was the first relationship that I added, so the name sticks
    $my_view = views_get_view($my_view_name);
    if ( is_object($my_view) ) { 
	$my_view->set_display($my_display_name);


	$relation_relationship = $my_view->get_item($my_display_name, 'relationship', 'relation_base_left_crm_member');
	$relation_relationship['r_index'] = $r_index;
	$relation_relationship['field'] = 'relation_base_left_' . $relation_type;
	$my_view->set_item($my_display_name , 'relationship', 'relation_base_left_crm_member', $relation_relationship);
	
	$relation_relationship = $my_view->get_item($my_display_name, 'relationship', 'relation_base_crm_member_crm_core_contact');
	$relation_relationship['r_index'] = 1 - $r_index;
	$relation_relationship['field'] = 'relation_base_' . $relation_type . '_crm_core_contact';
	$my_view->set_item($my_display_name , 'relationship', 'relation_base_crm_member_crm_core_contact', $relation_relationship);
	
//	$filter_relation_type = $my_view->get_item($my_display_name, 'filter', 'relation_type');
//	$filter_relation_type['value'] = array($relation_type);
//	$my_view->set_item($my_display_name , 'filter', 'relation_type', $filter_relation_type);	

	
	$filter_source_contact_id = $my_view->get_item($my_display_name, 'filter', 'contact_id');
	$filter_source_contact_id['value']['value'] = $entity->contact_id;
	$my_view->set_item($my_display_name , 'filter', 'contact_id', $filter_source_contact_id);	

	$my_view->pre_execute();
	$rendered = $my_view->render($my_display_name);
	return $my_view->render($rendered);
    }
}


//implement hook_menu()
function crm_entity_types_settings_menu()
{
    $items = array();
    $menu_items = array();
    $tabs_info = crm_entity_types_settings_all_menu_items();
    //print_r($tabs_info);
    foreach($tabs_info as $tab_info)
    {
	$extender_cb = $tab_info['menu_hook_create_cb'];

	$extended_tab_info = call_user_func($extender_cb, $tab_info);
	$key = $extended_tab_info['menu_hook_url'];
	$menu_items[$key] = $extended_tab_info;
	//print_r($key);
    }
    
    print_r($menu_items);

    return $menu_items;
}

function crm_entity_types_settings_menu_alter(&$items) 
{
    // Unset crm-core tab for relationship which is too generic for this module
//    print "<pre>menu items:". print_r($items, true). "</pre>";
    //unset($items['crm-core/contact/%/relationships']);
}

//implements hook_views_data_alter
function crm_entity_types_settings_views_data_alter(&$data)
{
//    print "<pre>views items keys:". print_r(array_keys($data), true). "</pre>";
//    print "<pre>views items:". print_r($data, true). "</pre>";
//    unset ($data['crm_relationships_by_contact']);
//    unset ($data['crm_core_contact']);
}

// implements hook_menu_local_tasks_alter
function crm_entity_types_settings_menu_local_tasks_alter(&$data, $router_item, $root_path)
{
    $entity_obj = menu_get_object('crm_core_contact', 2); //instead of using page arguments array from $router_item
    if (!$entity_obj) //this is in the case that the url does not have a loader, such as .../contact/%my_loader_func/bla
    {
	switch($router_item['page_callback'])
	{
	    
	}
//	$entity_obj = crm_core_contact_load();
    }     
    
    if ($entity_obj) 
    {
	$tabs = crm_entity_types_settings_get_pages($entity_obj);
	if ($tabs){ //if $tab==NULL it means that this entity type has no tabs config yet
	    $menu_level = 0;
	    foreach($data['tabs'][$menu_level]['output'] as $tab_key => $tab_data)
	    {
		//we want to unregister this tab if it doesn't fit our entity type
		$registered_tab_path = $tab_data['#link']['path']; 
		if (!array_key_exists($registered_tab_path, $tabs['tabs']) &&
			$registered_tab_path != "crm-core/contact/%/devel"
		    )
		{
		    unset($data['tabs'][$menu_level]['output'][$tab_key]);
		}else{
		}
		//@TODO: add new tabs/actions from crm_entity_types_settings_get_pages() that were not yet been registered by hook_menu().
	    }
	}else{
	    kpr("no tabs");
	}

    }
}
