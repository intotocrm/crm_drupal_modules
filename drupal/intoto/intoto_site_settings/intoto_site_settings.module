<?php

/**
 * @file
 * Describe the entity with interface for managing bundles.
 */

/**
 * Implements hook_entity_info().
 */
function intoto_site_settings_entity_info() {
  $info = array(
    'intoto_site_settings' => array(
      'label' => t('Intoto Site Settings'),
      'base table' => 'intoto_site_settings',
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'entity class' => 'IntotoSiteSettings',
      'controller class' => 'IntotoSiteSettingsController',
      'metadata controller class' => '',
      'fieldable' => TRUE,
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'module' => 'intoto_site_settings',
    'access callback' => 'intoto_site_settings_access',
    ),
  );
  $info['intoto_site_settings_type'] = array(
    'label' => t('Intoto Site Settings Type'),
    'base table' => 'intoto_site_settings_type',
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'bundle of' => 'intoto_site_settings',
    'entity class' => 'IntotoSiteSettingsType',
    'controller class' => 'IntotoSiteSettingsTypeController',
    'metadata controller class' => '',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'module' => 'intoto_site_settings',
    // Automatically create page for managing entity bundles.
    'admin ui' => array(
      'path' => 'admin/structure/intoto_site_settings',
      'file' => 'intoto_site_settings.admin.inc',
      'controller class' => 'IntotoSiteSettingsTypeUiController',
    ),
    // Access callback is necessary for admin UI.
    // @see http://drupal.org/node/1021576
    'access callback' => 'intoto_site_settings_type_access',
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function intoto_site_settings_entity_property_info() {
  $info = array();

  // Describe properties of entity.
  $properties = &$info['intoto_site_settings']['properties'];
  $properties['id'] = array(
    'type' => 'integer',
    'schema field' => 'id',
    'label' => t('Site Settings ID'),
    'description' => t('The internal ID of intoto site settings.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('Intoto Site Settings type (bundle)'),
    'description' => t('Type of Intoto Site Settings.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['title'] = array(
    'type' => 'text',
    'schema field' => 'title',
    'required' => TRUE,
    'label' => t('Intoto Site Settings title'),
    'description' => t('Title of Intoto Site Settings.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['description'] = array(
    'type' => 'text',
    'schema field' => 'description',
    'label' => t('Intoto Site Settings description'),
    'description' => t('Description of Intoto Site Settings.'),
    'setter callback' => 'entity_property_verbatim_set',
  );

  // Describe properties of entity type.
  $type_properties = &$info['intoto_site_settings_type']['properties'];
  $type_properties['id'] = array(
    'type' => 'integer',
    'schema field' => 'id',
    'label' => t('Type ID'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $type_properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('Type name'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $type_properties['label'] = array(
    'type' => 'text',
    'schema field' => 'label',
    'required' => TRUE,
    'label' => t('Type label'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $type_properties['description'] = array(
    'type' => 'text',
    'schema field' => 'description',
    'required' => TRUE,
    'label' => t('Type description'),
    'setter callback' => 'entity_property_verbatim_set',
  );

  return $info;
}

function intoto_site_settings_form_title($title)
{
	return t("System Settings");
}
/**
 * Implements hook_entity_info_alter().
 * 
 * Specify admin pages for all existing entity bundles.
 */
function intoto_site_settings_entity_info_alter(&$entity_info) {
  foreach (intoto_site_settings_type_load_multiple() as $type => $info) {
    $entity_info['intoto_site_settings']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/intoto_site_settings/manage/%intoto_site_settings_type',
        'real path' => 'admin/structure/intoto_site_settings/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_views_api().
 */
function intoto_site_settings_views_api() {
  // Describe the folder where "intoto_site_settings.views_default.inc" file
  // is located.
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'intoto_site_settings'),
  );
}

/**
 * Implements hook_menu().
 */
function intoto_site_settings_menu() {
  $items = array();

  // Base URI for dealing with entity.
  $base_uri = 'intoto_site_settings/%intoto_site_settings';
  $base_uri_argument_position = 1;

  // URI for choosing bundle of entity to add.
  $items['intoto_site_settings/add'] = array(
    'title' => 'Add Intoto Site Settings',
    'page callback' => 'intoto_site_settings_choose_bundle',
    'access arguments' => array('administer intoto_site_settings content'),
    'file' => 'intoto_site_settings.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // URI for adding entity of proper bundle.
  foreach (intoto_site_settings_type_load_multiple() as $type => $info) {
    $items['intoto_site_settings/add/' . $type] = array(
      'title' => 'Add Intoto Site Settings',
      'page callback' => 'intoto_site_settings_add',
      'page arguments' => array(2),
      'access arguments' => array('administer intoto_site_settings content'),
      'file' => 'intoto_site_settings.admin.inc',
    );
  }

  // URI for viewing entity instances.
//  $items[$base_uri] = array(
//    'title callback' => 'entity_label',
//    'title arguments' => array('intoto_site_settings', $base_uri_argument_position),
//    'page callback' => 'intoto_site_settings_view',
//    'page arguments' => array($base_uri_argument_position),
//    'access arguments' => array('view intoto_site_settings content'),
//    'file' => 'intoto_site_settings.pages.inc',
//  );
//  $items[$base_uri . '/view'] = array(
//    'title' => 'View Intoto Site Settings',
//    'type' => MENU_DEFAULT_LOCAL_TASK,
//    'weight' => -10,
//  );

  // URI for editing entity instances.
  $items[$base_uri . '/edit'] = array(
    'title' => 'Edit Intoto Site Settings',
	'title callback' => 'intoto_site_settings_form_title',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intoto_site_settings_form', $base_uri_argument_position),
    'access arguments' => array('edit intoto_site_settings content'),
    'file' => 'intoto_site_settings.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE | MENU_DEFAULT_LOCAL_TASK,
	'menu_name' => 'user',
  );

  // URI for deleting entity instances.
  $items[$base_uri . '/delete'] = array(
    'title callback' => 'intoto_site_settings_label',
    'title arguments' => array($base_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intoto_site_settings_delete_form', $base_uri_argument_position),
    'access arguments' => array('administer intoto_site_settings content'),
    'file' => 'intoto_site_settings.admin.inc',
  );

  // URI for deleting entity bundles.
  $items['admin/structure/intoto_site_settings/%intoto_site_settings_type/delete'] = array(
    'title' => 'Delete Intoto Site Settings Type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intoto_site_settings_type_form_delete_confirm', 4),
    'access arguments' => array('administer intoto_site_settings content'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'intoto_site_settings.admin.inc',
  );

  return $items;
}

function intoto_site_settings_form_intoto_site_settings_form_alter(&$form, &$form_state, $form_id)
{
	$bundles= entity_load("intoto_site_settings_type");
	$bundle_id = isset($form_state['entity']->type) ? $form_state['entity']->type : NULL;
	$title = "Settings";
	foreach ($bundles as $bundle){
		if ($bundle->type == $bundle_id){
			$title = $bundle->label;
			break;
		}
	}
	drupal_set_title($title);
	$path = current_path();
	dpm($path, "path");
	dpm($form, "form");
	dpm($form_state, "form_state");
	//$form_state['redirect'] = 
	$form['actions']['submit']['#value'] = t("Save");
}

function intoto_site_settings_admin_paths()
{
	return
	[
		"intoto_site_settings/*/edit" => TRUE,
	];
}

/**
 * Load an instance of intoto_site_settings.
 * 
 * @param int $id
 *   Entity identifier.
 * @param bool $reset
 *   Whether to reset the internal cache for intoto_site_settings.
 * 
 * @return mixed
 *   An actual entity, or false.
 */
function intoto_site_settings_load($id, $reset = FALSE) {
  $entities = intoto_site_settings_load_multiple(array($id), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple instances of intoto_site_settings.
 * 
 * @param array $ids
 *   Entity identifiers.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base entity table.
 * @param bool $reset
 *   Whether to reset the internal cache for intoto_site_settings.
 * 
 * @return array
 *   Founded entities.
 */
function intoto_site_settings_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('intoto_site_settings', $ids, $conditions, $reset);
}

/**
 * Load an instance of intoto_site_settings_type.
 * 
 * @param string $entity_type
 *   Name of the entity type to load.
 * 
 * @return mixed
 *   Founded entity type, or false.
 */
function intoto_site_settings_type_load($entity_type) {
  return intoto_site_settings_type_load_multiple($entity_type);
}

/**
 * Load multiple instances of intoto_site_settings_type.
 * 
 * @param string $type_name
 *   Name of the entity type to load.
 * 
 * @return mixed
 *   Founded entity type, or false.
 */
function intoto_site_settings_type_load_multiple($type_name = NULL) {
  $types = entity_load_multiple_by_name('intoto_site_settings_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Access callback for intoto_site_settings_type.
 */
function intoto_site_settings_type_access($op, $entity = NULL) {
  return user_access('administer intoto_site_settings content');
}


function intoto_site_settings_access($op, $entity = NULL)
{
	if ($op == 'edit'){
		return user_access('edit intoto_site_settings content');
	}
  return user_access('administer intoto_site_settings content');
}

function intoto_site_settings_load_settings($site_settings_type) {
	$entities = intoto_site_settings_load_multiple([1]);  //1 is the default for the site settings for this stage of development when I have only one bundle
	//in the future take $site_settings_type into account (map it to the relevant single entity id)
	return $entities;
}

/**
 * @file
 * Provide permissions for all sub-modules.
 */

/**
 * Implements hook_permission().
 */
function intoto_site_settings_permission() {
  $permissions = array(
    'view intoto_site_settings content' => array(
      'title' => t('View Site Settings content'),
    ),
    'administer intoto_site_settings content' => array(
      'title' => t('Administer Site Settings content'),
      'restrict access' => TRUE,
    ),
    'edit intoto_site_settings content' => array(
      'title' => t('Edit Site Settings content'),
    ),
  );
  return $permissions;
}
