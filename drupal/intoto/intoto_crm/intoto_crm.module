<?php

$module_name = 'intoto_crm';
module_load_include('inc', $module_name , 'intoto_crm_hooks');
module_load_include('inc', $module_name , 'tokens');
module_load_include('inc', $module_name , 'blocks');
module_load_include('inc', $module_name , 'forms');
module_load_include('inc', $module_name , 'add_related_contact');

module_load_include('inc', 'crm_core_relationship_ui', 'crm_core_relationship_ui.pages');



function intoto_crm_menu()
{
	$items = [];
	// URI for adding a new contact which is related (relation) to "current" contact
	$items['crm-core/contact/%crm_core_contact/new_related/%/%/%'] = array(
		'title' => 'Add new related entity',
		'page callback' => 'intoto_crm_create_new_relationship',
		'page arguments' => array(2, 4, 5, 6),  //base contact, relationship_type, reverse, target-type
		'access callback' => 'crm_core_relationship_access_permissions',
		'access arguments' => array(NULL, 'create_view'),
//		'file' => 'ticker.admin.inc',
	);

	$items['crm-core/contact/%/remove_from_relationship/%'] = array(
		'title' => 'Remove entity from relationship',
		'page callback' => 'intoto_crm_remove_from_relationship',
		'page arguments' => array(2, 4),  //base contact, r
		'access callback' => 'crm_core_relationship_access_permissions',
		'access arguments' => array(NULL, 'create_view'),
		'type' => MENU_CALLBACK,
	);
	
	return $items;
}
function intoto_crm_enable()
{
	variable_set('site_frontpage', 'home');
	variable_set('site_403','unauth_page');
}
/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function intoto_crm_help($path, $arg) {
  switch ($path) {
    case "admin/help#intoto_crm":
      return '<p>' . t("Implementation and hooks for Intoto") . '</p>';
      break;
  }
} 
function intoto_crm_admin_paths() {
	$paths = array();
	$paths['crm-core/contact/*/new_related/*/*/*'] = TRUE;  
	return $paths;
}

function intoto_crm_admin_paths_alter(&$paths) {
    $paths['crm-core/contact/*/household/add'] = TRUE;
    $paths['crm-core/contact/*/activity/add'] = TRUE;
    $paths['crm-core/contact/*/activity/add/*'] = TRUE;
    $paths['crm-core/contact/*/edit'] = TRUE;
}



//function intoto_crm_entity_update($entity, $type)
//{
//	
////	$message = "XYZ";
////	drupal_set_message($message, /*$type*/ 'status', /*$repeat*/FALSE);
//}


function intoto_crm_entity_presave($entity, $type){
//function intoto_crm_entity_insert($entity, $type){
//	drupal_set_message("added entity of type $type:". $entity->type);
	//drupal_set_message("<pre>" . print_r($entity, true) . "</pre>");
//	print "in intoto_crm_entity_presave for type $type\n";
	if (isset($type)){
		if( $type == "crm_core_contact"){
			try {
				$contact_wrapper = entity_metadata_wrapper('crm_core_contact', $entity);

				if (isset($contact_wrapper->{"type"}) && $contact_wrapper->{"type"}->value() == 'customer')
				{
					if (strlen(trim($contact_wrapper->{"field_caption"}->value())) == 0 ||
						trim($contact_wrapper->{"field_caption"}->value()) == 'temp')
					{
						//glue family names together to form the household caption

//						$contact_id = $contact_wrapper->{"contact_id"}->value();
//						$num_relations = relation_query('crm_core_contact', $contact_id, 0)
//						->propertyCondition('relation_type', 'crm_member')
//						->count()
//						->execute();
//						$contact_wrapper->{"field_caption"}->set("**temp name**");
						drupal_set_message("saving " . $contact_wrapper->{"field_caption"}->value());
					}
				}



				// for non-individual contacts - change the name to look like a caption (crm-core needs the name field unfortunately)
				if (isset($contact_wrapper->{"field_caption"}))
				{
					$caption = $contact_wrapper->{"field_caption"}->value();
		//			drupal_set_message("<pre>" . print_r($entity->contact_name, true) . "</pre>");
					$contact_wrapper->{"contact_name"}->{"given"}->set($caption);
		//			drupal_set_message("<pre>" . print_r($entity->contact_name, true) . "</pre>");
		//					->set(
		//						array(
		//								"title" => "",
		//								"given" => $caption,
		//								"middle" => "",
		//								"family" => "",
		//								"generational" => "",
		//								"credentials" =>  "",
		//							)
		//					);
		//			$contact_wrapper->contact_name_family ->set("");
				}

			}catch (EntityMetadataWrapperException $exc) {
				drupal_set_message("exception:" . $exc->getTraceAsString() );
			}
		}elseif($type == 'relation')
		{
			if (is_object($entity) &&
				isset($entity->endpoints['und']) &&
				isset($entity->relation_type) &&
				($entity->relation_type == 'crm_member' || $entity->relation_type == 'member' )
				)
			{
				//			drupal_set_message("saving " . $type);
				//drupal_set_message("<pre>" . print_r($entity, true). "</pre>");
				$customer_entity_wrapper = NULL; //keep the relevant customer entity for updating its caption
				$customer_caption = NULL;
				$customer_id = NULL;
				$ips_last_names = array();
//				print "endpoints:" . print_r($entity->endpoints, true) . "\n";
				foreach($entity->endpoints['und'] as $key=>$endpoint)
				{
					if (	isset($endpoint['entity_type']) &&
							$endpoint['entity_type'] == 'crm_core_contact' &&
							isset($endpoint['entity_bundle']) && 
							isset($endpoint['entity_id'])
						)
					{
						
						$entity_id = $endpoint['entity_id'];
						$entities = entity_load($endpoint['entity_type'], array($entity_id));
						$count = count($entities);
//						print "entity_id:$entity_id, count:$count\n";
						if ($count == 1)
						{
							$contact_wrapper = entity_metadata_wrapper('crm_core_contact', $entities[array_keys($entities)[0]]);
							

							if (isset($contact_wrapper->{"type"})) {
								if ($contact_wrapper->{"type"}->value() == 'customer')
								{
									$customer_entity_wrapper = $contact_wrapper;
									$customer_id = $entity_id;
								}elseif($contact_wrapper->{"type"}->value() == 'ip')
								{
									$ips_last_names[] = $contact_wrapper->{"contact_name"}->{"family"}->value();
								}
							}
							//drupal_set_message("saving relation with " . $endpoint['entity_bundle'] . " id " . $endpoint['entity_id']);
						}
					}
				}
				$save = false;
				if (is_object($customer_entity_wrapper)){
					$customer_caption = $customer_entity_wrapper->{"field_caption"}->value();
					$original_caption = $customer_caption;
					foreach($ips_last_names as $last_name)
					{
						
						if (	strlen(trim($last_name)) > 0 &&
								!strchr(strtolower(trim($customer_caption)), trim(strtolower($last_name))))
						{
							if (trim($customer_caption) != ""){
								$customer_caption .=  "-";
							}
							$customer_caption .= $last_name;
							$save = true;
						}
					}
				}
				if ($save)
				{
					$customer_entity_wrapper->{'field_caption'}->set($customer_caption);
					$customer_entity_wrapper->save();
					drupal_set_message("Household " . $original_caption . " was renamed to <strong>" . $customer_caption . "</strong>.<br>Press " . l("here", "/crm-core/contact/$customer_id", array('attributes'=>array('class'=>array('alert-link')))) . " to view/edit");
				}
			}
		}
	}
}


//function intoto_crm_views_pre_render(&$view)
//{
//	drupal_set_message("<pre>" . print_r($view, true) . "</pre>");
//}


/**
 * Implements hook_preprocess_HOOK().
 */
function intoto_crm_preprocess_entity(&$variables, $hook)
{
//	watchdog("bootstrap_dashboard", "preprocess_entity". '_' . $variables['entity_type']);	

	$function = __FUNCTION__ . '_' . $variables['entity_type'];
	if (function_exists ($function)) {
		$function($variables, $hook);
	}
}


function intoto_crm_remove_from_relationship($entity_id, $rid)
{
	drupal_set_message("removed relation #$rid");
	relation_delete($rid);
	print "OK";
}


function intoto_crm_views_api() {
  return array(
    'api' => 3,
  );  
}
