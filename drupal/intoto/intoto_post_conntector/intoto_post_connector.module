<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

function intoto_post_connector_menu()
{
	$items = array();
	$items['react/%'] = array (
		'page callback' => 'respond_to_post',
		'page arguments' => array(1),
		'access callback' => TRUE,
	);
	return $items;
}
function intoto_post_connector_get_request()
{
	
	$request = array(
		'params' => array(),
		'request_data' => array(),
	);
	foreach ($_POST as $key=>$value)
	{
//		$request['params'][check_plain($key)] = check_plain($value);
		$request['params'][$key] = $value;
	}

	foreach (array('HTTP_USER_AGENT', 'SERVER_ADDR', 'SERVER_PORT', 'REQUEST_URI', 'REMOTE_ADDR', 'REQUEST_SCHEME', 'REMOTE_PORT', 'REQUEST_TIME') as $key)
	{
		$request['request_data'][$key] = isset($_SERVER[$key]) ? check_plain($_SERVER[$key]) : "unknown";
	}
	return $request;
}


function respond_to_post($request_type)
{
	$request_type_filtered = check_plain($request_type);
	$function_name = "intoto_post_connector_respond_to_" . $request_type_filtered;
	if ($request_type_filtered == $request_type && function_exists($function_name))
	{
		$function_name(intoto_post_connector_get_request());
	}
}


function intoto_post_connector_respond_to_contact_us_form($request)
{
	print_r($request);

	$params = $request['params'];
	$fields_alternative_fieldnames = array(
		'name' => array('name', 'FirstName', 'your-name', ),
		'phone' => array('phone', 'MobilePhone',),
		'email' => array('email', 'Email', 'your-email',),
		'message' => array('message', 'Remarks', 'your-message', ),
	);
	
	foreach($fields_alternative_fieldnames as $key => $alternative_fieldnames)
	{
		foreach($alternative_fieldnames as $fieldname)
		{	
			if (isset($params[$fieldname]))
			{
				$params[$key] = $params[$fieldname];
			}
		}
		if (!isset($params[$key]))
		{
			print("missing:$key<BR>");
			$params[$key] = "";
			//return;
		}
	}
	
	//create an IP entity
	$ip_entity = entity_create('crm_core_contact', array('type' => 'ip',));
	$ip_wrapper = entity_metadata_wrapper('crm_core_contact', $ip_entity);	
	$name_parts = explode(" ", $params['name']);
	$family_name = implode(" ", array_slice($name_parts, 1));
	$first_name = $name_parts[0];
	$ip_wrapper->{"contact_name"}->{"given"}->set($first_name);
	$ip_wrapper->{"contact_name"}->{"family"}->set($family_name);
	$ip_wrapper->{"field_email"}->set($params['email']);
	$ip_wrapper->{"field_originally_came_from"}->set("contact_us_form");
	$ip_wrapper->{"field_notes"}->set("Message from 'contact us' form:\n" . $params['message']);
	
	$phone_collection = entity_create('field_collection_item', array('field_name' => 'field_phone'));
	$phone_collection->setHostEntity('crm_core_contact', $ip_entity);
	// Now define the collection parameters.
    $phone_wrapper = entity_metadata_wrapper('field_collection_item', $phone_collection);
	$phone_wrapper->field_type->set('mobile');
	$phone_wrapper->{"field_number"}->{"number"}->set($params['phone']);
	$phone_wrapper->{"field_number"}->{"country_codes"}->set('il');
	$phone_wrapper->{"field_number"}->{"extension"}->set('');
	$phone_wrapper->save();  
	$ip_result = $ip_wrapper->save();
	
	//create a customer entity
	$customer_entity = entity_create('crm_core_contact', array('type' => 'customer',));
	$customer_wrapper = entity_metadata_wrapper('crm_core_contact', $customer_entity);
	if(strlen(trim($family_name)) == 0){
		$family_name = "family of $first_name";
	}
	
	$customer_wrapper->{"field_caption"}->set($family_name);
	$customer_wrapper->{"field_notes"}->set("Message from Customer:\n" . $params['message']);
	$customer_wrapper->{"field_originally_came_from"}->set("contact_us_form");
	$customer_result = $customer_wrapper->save();
	
	//relate the newly created IP and Customer
	$ip_id = $ip_wrapper->getIdentifier();
	$customer_id = $customer_wrapper->getIdentifier();
	if ($ip_id > 0 && $customer_id > 0){
		$member_relation = relation_create("crm_member",
				array(
					array('entity_type' => 'crm_core_contact', 'entity_id' => $ip_id),
					array('entity_type' => 'crm_core_contact', 'entity_id' => $customer_id),
					)
				);
		$relation_result = relation_save($member_relation);
	}
	
//	print "**\n". print_r($ip_id, true) . "\n\n&&&\n". print_r($customer_id,true)."\n\n";
//	print "----\nip result:".print_r($ip_result, true)."\n\n\ncustomer result:".print_r($customer_result, true)."\n\n\nrelation:\n".print_r($member_relation,true)."\n\nbye";
//	print "";
}