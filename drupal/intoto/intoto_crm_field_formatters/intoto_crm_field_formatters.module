<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
* Implements hook_theme().
*/
function intoto_crm_field_formatters_theme() {
  return array(
    'label_formatter' => array(
      'variables' => array('element' => NULL),
    ),
    'bootstrap_formatter' => array(
      'variables' => array('element' => NULL),
    ),
    'icon_formatter' => array(
      'variables' => array('element' => NULL),
    ),
  );
}
	
	
/**
 * Implements hook_field_formatter_info().
 */
function intoto_crm_field_formatters_field_formatter_info() {
	return array(
		'intoto_label_formatter' => array( //Machine name of the formatter
			'label' => t('Small Label'),
			'field types' => array('text', 'text_long', 'text_with_summary', 'datetime', 'date', 'number_decimal', 'email', 'list_text', 'list_boolean'), //This will only be available to text fields
			'settings'	=> array( //Array of the settings we'll create
//				'pic_size' => 'small', //give a default value for when the form is first loaded
//				'tooltip' => 'Link to user Facebook page', //ditto
			),
		),

		'intoto_bootstrap_formatter' => array( //Machine name of the formatter
			'label' => t('Bootstrap'),
			'field types' => array('text', 'text_long', 'text_with_summary', 'datetime', 'date', 'number_decimal', 'email', 'list_text', 'list_boolean'), //This will only be available to text fields
			'settings'	=> array( //Array of the settings we'll create
//				'pic_size' => 'small', //give a default value for when the form is first loaded
//				'tooltip' => 'Link to user Facebook page', //ditto
			),
			
		),
		'intoto_icon_formatter' => array( //Machine name of the formatter
			'label' => t('Icon'),
			'field types' => array('text', 'text_long', 'text_with_summary', 'datetime', 'date', 'number_decimal', 'email', 'list_text', 'list_boolean', "field_collection"), //This will only be available to text fields
			'settings'	=> array( //Array of the settings we'll create
//				'pic_size' => 'small', //give a default value for when the form is first loaded
//				'tooltip' => 'Link to user Facebook page', //ditto
			),
		),
	);
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function intoto_crm_field_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
	//This gets the view_mode where our settings are stored
	$display = $instance['display'][$view_mode];
	//This gets the actual settings
	$settings = $display['settings'];
	return array();
/* this is an example of a facebook link button settings:
	//Initialize the element variable
		$element = array();
 
	//Add your select box
	$element['pic_size'] = array(
		'#type'					 => 'select',													 // Use a select box widget
		'#title'					=> t('Button Size'),									 // Widget label
		'#description'		=> t('Select what size of FB button'), // Helper text
		'#default_value'	=> $settings['pic_size'],							// Get the value if it's already been set
		'#options'				=> array(
			'small'	=> 'Small',
			'medium' => 'Medium',
			'large'	=> 'Large',
		),
	);
	$element['tooltip'] = array(
		'#type'					 => 'textfield',												// Use a textbox
		'#title'					=> t('Tool Tip'),											// Widget label
		'#description'		=> t('This text will appear when a user mouses over.'),	// helper text
		'#default_value'	=> $settings['tooltip'],							 // Get the value if it's already been set
	);
	return $element;
 
 */
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function intoto_crm_field_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
	return "";
	
	/* this is from the facebooklink example:
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];
	$summary = t('Use a @size Facebook button with the tooltip of "@tooltip"', array(
		'@size'		 => $settings['pic_size'],
		'@tooltip'	=> $settings['tooltip'],
	)); // we use t() for translation and placeholders to guard against attacks
	return $summary;
	 
	 */
}



 /*example from facebooklink:
/**
 * Implements hook_field_formatter_view().
 */
/*
 function facebooklink_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array(); // Initialize the var
	$settings = $display['settings']; // get the settings
	$size = $settings['pic_size']; // The Size setting selected in the settings form
	$tooltip = $settings['tooltip']; // The tool tip assigned in settings
	// Create the image - Note that I'm storing the images in our module but they could be anywhere
	$image = '<img src="/' . drupal_get_path('module', 'facebooklink') . 'fb-' . $size . '.png">';
	foreach ($items as $delta => $item) {
		$fb = $item['safe_value']; // Getting the actual value
	}
	$options = array(
		'html'				=> TRUE, // This tells Drupal that we're sending HTML, not plain text, otherwise it would encode it
		'attributes'	=> array(
			'title' => $tooltip, // This sets our tooltip
			),
		);
	if(isset($fb)) {
		$link = l($image, $fb, $options); // Create the Link
		$element[0]['#markup'] = $link; // Assign it to the #markup of the element
	}
	return $element;
} 
 
 */
function intoto_crm_prepare_field_theme($theme, $entity_type, $entity, $field, $instance, $langcode, $items, $display) 
{
	$elements = array(); // Initialize the var
	$label_set = false;
	
	foreach ($items as $delta => $item) {
		$label = NULL;
		//print_r($display);
		$value = NULL;
		$comment = "";
		if (isset($item)){
			switch($field['type']){
				case 'email':
					$value = l($item['email'], 'mailto:' . $item['email'], array('absolute' => TRUE));
					break;
				case 'text_long':
					$value = $item['safe_value'];
					break;
				case 'field_collection':
					//load field collection by id
					$field_collections = entity_load('field_collection_item', array($item['value']));
					$field_collection = $field_collections [array_keys($field_collections)[0]]; //take only the first loaded collection

					
					$contact_wrapper = entity_metadata_wrapper('crm_core_contact', $entity);
					$number_fields = $contact_wrapper
						->field_phone[$delta]
						->field_number
						->value();
					
					$number = make_phone_number($number_fields, true);
					$number_link = make_phone_number($number_fields, false);
					if ($number != "")
					{
						$value = l($number, 'tel:'. $number_link , array('html' => TRUE, 'attributes' => array('class'=>array('callto'))));
					}
					
					
//					if (isset($field_collection->field_name) && $field_collection->field_name == 'field_phone')
//					{
//						//$number = theme_cck_phone_formatter_global_phone_number($field_collection->field_number['und'][0]);
//						$number = $phone_wrapper->{"number"}->value();
//						if ($number != "")
//						{
//							$value = l($number, 'tel:'. $field_collection->field_number['und'][0]['number'], array('attributes' => array('class'=>array('callto'))));
//						}
//						
//					}
					break;
				case 'datetime':
					$date = new DateTime($item['value']);
					$value = $date->format('Y-m-d');
					if ($field['field_name'] == 'field_date_of_birth')
					{
						$now = new DateTime('now');
						$interval = date_diff($now, $date);
						$comment .= $interval->format('%yyo');
						
					}
					break;
				case 'list_boolean':
				default :
					$value = $item['value'];
					break;

			}

			if (isset($field['settings']['allowed_values'][$value]))
			{
				$value = $field['settings']['allowed_values'][$value];
			}
			
			if (isset($instance['label']) && !$label_set) {  //!isset($label) because I want the label to appear only once
				$label = $instance['label'];
				$label_set = true;
			}
		}
		if ($value != NULL){
			$element = array('element' => $item, 'value' => $value, 'label' => $label, 'comment' => $comment, 'field' => $field, 'field_instance' => $instance, 'display' => $display);
			$elements[$delta] = array(
				'#markup' => theme($theme/*'label_formatter'*/, $element),
			);
		}
		//print "<pre>delta:$delta markup:" . $elements[$delta]['#markup'] . "</pre><br>";
	}

	return $elements;
}

function intoto_crm_field_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) 
{
//	$settings = $display['settings']; // get the settings
	//$size = $settings['pic_size']; // The Size setting selected in the settings form
	//$tooltip = $settings['tooltip']; // The tool tip assigned in settings
	// Create the image - Note that I'm storing the images in our module but they could be anywhere
	if ($display['type'] == 'intoto_label_formatter')
	{
		return intoto_crm_prepare_field_theme('label_formatter', $entity_type, $entity, $field, $instance, $langcode, $items, $display) ;
	}
	if ($display['type'] == 'intoto_bootstrap_formatter')
	{
		return intoto_crm_prepare_field_theme('bootstrap_formatter', $entity_type, $entity, $field, $instance, $langcode, $items, $display) ;
	}
	if ($display['type'] == 'intoto_icon_formatter')
	{
		return intoto_crm_prepare_field_theme('icon_formatter', $entity_type, $entity, $field, $instance, $langcode, $items, $display) ;
	}
}
			

/**
* Theme function for grasmash_formatter_grasmash_phone_mobile_call_link.
*/
function theme_label_formatter($element) {
	return '->>placeholder for element rendering in label_formatter theme<<-';// . $element['value'] . '<<-';//<a class="mobile-tel" href="tel:' . $element['element']['number']  . '">Call</a>';
}

function theme_bootstrap_formatter($element) {
	return '->>placeholder for element rendering in bootstrap_formatter theme<<-';// . $element['value'] . '<<-';//<a class="mobile-tel" href="tel:' . $element['element']['number']  . '">Call</a>';
}

function theme_icon_formatter($element) {
	return '->>placeholder for element rendering in icon_formatter theme<<-';// . $element['value'] . '<<-';//<a class="mobile-tel" href="tel:' . $element['element']['number']  . '">Call</a>';
}


function make_phone_number($element, $paren) {
  $phone = '';

  // Display a global phone number with country code.
  if (!empty($element['number']) && !empty($element['country_codes'])) {
    // Call country default formatter if exists.
    $custom_cc = _cck_phone_custom_cc();
    if (isset($custom_cc[$element['country_codes']])) {
      $function = $element['country_codes'] . '_formatter_default';
      if (function_exists($function)) {
        $phone = $function($element);
      }
    }

    // Output a raw value if no custom formatter or formatter returns empty
    // value.
    if (empty($phone)) {
      $cc = cck_phone_countrycodes($element['country_codes']);
	  if ($paren){
		  $phone = "(" . $cc['code'] . ") " . $element['number'];
	  }else{
		if ($element['number'][0] == '0') {
			//peel off prefix zero (052-1234567 becomes 52-1234567)
			$element['number'] = substr ($element['number'], 1);
		}
		$phone = $cc['code'] . '-' . $element['number'];
	  }
    }

    // Extension.
    if (!empty($element['extension'])) {
      $phone = $phone . ($paren ? (" (". $element['extension'] . ")" ) : ("-" . $element['extension']));
    }
  }

  return $phone;
}