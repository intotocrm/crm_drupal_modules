<?php // 
//

function local_crm_core_relation_entity_ui_get_form_wrapper($contact, $type, $reverse) {
	return crm_core_relation_entity_ui_get_form_wrapper($contact, $type, $reverse);
}


function ormil_menu()
{
	$items = array();    
	$items['crm-core/contact/%crm_core_contact/household/add'] = array(
		'title' => 'Add Household',
		'description' => 'Add a household to this contact',
//		'page callback' => 'crm_core_relation_entity_ui_get_form_wrapper',
		'page callback' => 'local_crm_core_relation_entity_ui_get_form_wrapper',

		'page arguments' => array( 2, "crm_member", "0"),
		'access callback' => 'crm_core_relationship_access_permissions',
		'access arguments' => array(NULL, 'create_view'),
//		'type' => MENU_LOCAL_ACTION,
		'type' => MENU_CALLBACK,
//		'file' => 'crm_core_relationship_ui.pages.inc',
	);

	$items['crm-core/contact/%crm_core_contact/household_member/add'] = array(
		'title' => 'Add Household Member',
		'description' => 'Add a household member to this contact',
//		'page callback' => 'crm_core_relation_entity_ui_get_form_wrapper',
		'page callback' => 'local_crm_core_relation_entity_ui_get_form_wrapper',

		'page arguments' => array( 2, "crm_member", "1"),
		'access callback' => 'crm_core_relationship_access_permissions',
		'access arguments' => array(NULL, 'create_view'),
//		'type' => MENU_LOCAL_ACTION,
		'type' => MENU_CALLBACK,
//		'file' => 'crm_core_relationship_ui.pages.inc',
	);

	return $items;
}

function ormil_menu_alter(&$items)
{
	//print("in intoto_crm_menu_alter\n:".print_r(array_keys($items), true). "\n");
	//unset($items['crm-core/contact/%crm_core_contact']);
	unset($items['crm-core/contact/%crm_core_contact/view']);
//	unset($items['crm-core/contact/%crm_core_contact/edit']);
	$items['crm-core/contact/%crm_core_contact/edit']['type'] = MENU_CALLBACK;
	
	
//	$items['crm-core/contact/%crm_core_contact/view'] = $items['crm-core/contact/%crm_core_contact/details'];
//	$items['crm-core/contact/%crm_core_contact/view']['type'] = MENU_CALLBACK;
//	$items['crm-core/contact/%crm_core_contact/details']['type'] = MENU_DEFAULT_LOCAL_TASK;
}

function ormil_admin_paths_alter(&$paths) {
    $paths['crm-core/contact/*/household/add'] = TRUE;
    $paths['crm-core/contact/*/household_member/add'] = TRUE;
    $paths['crm-core/contact/*/activity/add'] = TRUE;
    $paths['crm-core/contact/*/activity/add/*'] = TRUE;
    $paths['crm-core/contact/*/edit'] = TRUE;
}

function ormil_views_api() {
  return array(
    'api' => 3,
  );
}


/**
* Implementation of hook_ctools_plugin_api().
*/
function ormil_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1); 
  }
}


function ormil_form_alter(&$form, &$form_state, $form_id)
{
    switch($form_id) {
                case 'crm_core_contact_ui_form':
//                      dpm($form);
//                      dpm($form_state);
                        $contact_type = $form['#entity']->type;
                        switch($contact_type){
                                case "customer":
                                        $form['contact_name']['#access'] = FALSE;
				//no break here: I want customer type to remove 'field_originally_came_from' too
                              case "ip":
                                        $form['field_originally_came_from']['#access'] = FALSE;
                                        break;
                        }
                        break;
    }
}

function ormil_can_add_relationship($entity_type, $contact_id, $relation_id, $relation_r_index, &$messages)
{
	if ($entity_type == "crm_core_contact" && $relation_id == "crm_member" && $relation_r_index == 0)
	{
		// this is the case of an IP that wants to add a Household. only ne household can be related to each IP.
		// TODO: take into account the due-date (from...until) of the existing relations.
		// dont check the contact's bundle since there is other logic that prevents error of this kind.

		// count how many relationships of this type are there already
		$count = relation_query('crm_core_contact', $contact_id, $relation_r_index)
			->propertyCondition('relation_type', $relation_id)
			->count()
			->execute();
		
		if ($count >= 1) //why should it be > 1? not in current implementation...
		{
			return 0;
		}
	}
	return 1;
}